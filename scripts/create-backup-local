#!/usr/bin/env bash

set -e
set -u

script_name="$(basename "$0")"
script_dir="$(realpath "$(dirname "$0")")"

usage() {
  echo "${script_name}: usage: ${script_name} BACKUP_RELATIVE_FILENAME" >&2
}

exit_with_error() {
  echo "${script_name}: error: $1" >&2
  usage
  exit 1
}

recieved_arguments="$#"
expected_arguments="1"

if [ "${recieved_arguments}" != "${expected_arguments}" ]; then
  exit_with_error "invalid number of arguments, expected \"${expected_arguments}\", recieved \"${recieved_arguments}\""
fi

if [ "$(id -u)" != "0" ]; then
  exit_with_error "script must be run as root"
fi

extract_variable() {
  grep "^${1}=" "${2}" | sed -E "s/^${1}=(.*)$/\1/"
}

ensure_directory() {
  directory="${1}"
  mkdir -p "${directory}"
  chown -R 10001:root "${directory}"
  chmod 777 "${directory}"
}

create_backup() {
  server="${1}"
  port="${2}"
  user="${3}"
  password="${4}"
  database="${5}"
  destination="${6}"
  docker run \
    --rm \
    -i \
    mcr.microsoft.com/mssql-tools \
    /opt/mssql-tools/bin/sqlcmd \
    -S "${server},${port}" \
    -U "${user}" \
    -P "${password}" \
    -Q "BACKUP DATABASE [${database}] TO DISK = N'${destination}' WITH NOFORMAT, NOINIT, NAME = '$(basename "${destination}")', SKIP, NOREWIND, NOUNLOAD, STATS = 10"
}

backup_relative_filename="${1}"
backup_filename="${script_dir}/../backups/${backup_relative_filename}"
backup_directory="$(dirname "${backup_filename}")"
container_filename="/backups/${backup_relative_filename}"
server="$(extract_variable "DB_SERVER" "${script_dir}/../.env")"
port="$(extract_variable "DB_PORT" "${script_dir}/../.env")"
user="$(extract_variable "DB_USER" "${script_dir}/../.env")"
password="$(extract_variable "DB_PASSWORD" "${script_dir}/../.env")"
database="$(extract_variable "DB_DATABASE" "${script_dir}/../.env")"

ensure_directory "$backup_directory" &&
  create_backup "$server" "$port" "$user" "$password" "$database" "$container_filename"
